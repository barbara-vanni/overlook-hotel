package backend.overlook_hotel.service;

import backend.overlook_hotel.model.Reservation;
import backend.overlook_hotel.model.Room;
import backend.overlook_hotel.repository.ReservationRepository;
import backend.overlook_hotel.repository.RoomRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

@Service
public class RoomStatusService {

    private static final Logger logger = LoggerFactory.getLogger(RoomStatusService.class);

    @Autowired
    private ReservationRepository reservationRepository;

    @Autowired
    private RoomRepository roomRepository;

    /**
     * T√¢che planifi√©e qui s'ex√©cute tous les jours √† 2h du matin
     * pour mettre √† jour le statut des chambres
     */
    @Scheduled(cron = "0 0 2 * * ?") // Tous les jours √† 2h00
    @Transactional
    public void updateRoomStatuses() {
        logger.info("üîÑ D√©but de la mise √† jour automatique des statuts de chambres");
        
        try {
            // Lib√©rer les chambres dont les r√©servations sont termin√©es
            liberateExpiredRooms();
            
            // Lib√©rer les chambres des r√©servations annul√©es
            liberateCancelledRooms();
            
            logger.info("‚úÖ Mise √† jour automatique des statuts termin√©e avec succ√®s");
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de la mise √† jour des statuts de chambres", e);
        }
    }

    /**
     * Lib√®re les chambres dont les r√©servations sont expir√©es
     */
    @Transactional
    public void liberateExpiredRooms() {
        LocalDate today = LocalDate.now();
        
        // Trouver toutes les r√©servations expir√©es (date de fin < aujourd'hui)
        List<Reservation> expiredReservations = reservationRepository.findExpiredReservations(today);
        
        logger.info("üìÖ Trouv√© {} r√©servations expir√©es", expiredReservations.size());
        
        for (Reservation reservation : expiredReservations) {
            Room room = reservation.getRoom();
            if ("reserved".equals(room.getStatus()) || "r√©serv√©".equals(room.getStatus())) {
                room.setStatus("libre");
                roomRepository.save(room);
                logger.info("üè® Chambre {} ({}) lib√©r√©e - r√©servation expir√©e", 
                           room.getId(), room.getType());
            }
        }
    }

    /**
     * Lib√®re les chambres des r√©servations annul√©es
     */
    @Transactional
    public void liberateCancelledRooms() {
        // Trouver toutes les r√©servations annul√©es
        List<Reservation> cancelledReservations = reservationRepository.findCancelledReservations();
        
        logger.info("‚ùå Trouv√© {} r√©servations annul√©es", cancelledReservations.size());
        
        for (Reservation reservation : cancelledReservations) {
            Room room = reservation.getRoom();
            if ("reserved".equals(room.getStatus()) || "r√©serv√©".equals(room.getStatus())) {
                room.setStatus("libre");
                roomRepository.save(room);
                logger.info("üè® Chambre {} ({}) lib√©r√©e - r√©servation annul√©e", 
                           room.getId(), room.getType());
            }
        }
    }

    /**
     * M√©thode manuelle pour forcer la mise √† jour (utile pour les tests ou admin)
     */
    public void manualRoomStatusUpdate() {
        logger.info("üîß Mise √† jour manuelle des statuts de chambres d√©clench√©e");
        updateRoomStatuses();
    }

    /**
     * V√©rifie et met √† jour le statut d'une chambre sp√©cifique
     */
    @Transactional
    public boolean checkAndUpdateRoomStatus(UUID roomId) {
        Room room = roomRepository.findById(roomId).orElse(null);
        if (room == null) {
            logger.warn("‚ö†Ô∏è Chambre avec ID {} non trouv√©e", roomId);
            return false;
        }

        LocalDate today = LocalDate.now();
        
        // V√©rifier s'il y a des r√©servations actives pour cette chambre
        List<Reservation> activeReservations = reservationRepository
            .findActiveReservationsForRoom(roomId, today);
        
        if (activeReservations.isEmpty()) {
            // Aucune r√©servation active, la chambre doit √™tre libre
            if (!"libre".equals(room.getStatus())) {
                room.setStatus("libre");
                roomRepository.save(room);
                logger.info("üè® Chambre {} ({}) mise √† jour vers 'libre'", 
                           room.getId(), room.getType());
                return true;
            }
        } else {
            // Il y a des r√©servations actives, la chambre doit √™tre r√©serv√©e
            if (!"reserved".equals(room.getStatus()) && !"r√©serv√©".equals(room.getStatus())) {
                room.setStatus("reserved");
                roomRepository.save(room);
                logger.info("üè® Chambre {} ({}) mise √† jour vers 'reserved'", 
                           room.getId(), room.getType());
                return true;
            }
        }
        
        return false; // Aucun changement n√©cessaire
    }
}
